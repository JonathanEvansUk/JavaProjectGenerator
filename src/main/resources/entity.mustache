package {{packageName}};

import java.util.Arrays;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.CascadeType;
{{#hasOneToMany}}
import javax.persistence.OneToMany;
import java.util.ArrayList;
{{/hasOneToMany}}
{{#hasManyToOne}}
import javax.persistence.ManyToOne;
import javax.persistence.FetchType;
{{/hasManyToOne}}

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

{{#imports}}
{{.}}
{{/imports}}

@Entity
public class {{className}} {

{{#fields}}
  {{#isId}}
  @Id
  {{/isId}}
  {{#isOneToMany}}
  @OneToMany(cascade = CascadeType.ALL, mappedBy = "{{entityNameCamel}}", orphanRemoval = true)
  {{/isOneToMany}}
  private {{{simpleTypeName}}} {{name}}{{#isOneToMany}}= new ArrayList<>(){{/isOneToMany}};

{{/fields}}
{{#manyToOneSideModels}}
  @ManyToOne(fetch = FetchType.LAZY)
  private {{name}} {{nameCamel}};

{{/manyToOneSideModels}}
{{! begin feature: getter methods }}
{{#fields}}
  public {{{simpleTypeName}}} {{getterName}}() {
    return {{name}};
  }
{{^-last}}

{{/-last}}
{{/fields}}
{{! end feature: getter methods }}

{{! begin feature: setter methods }}
{{#fields}}
  public void {{setterName}}({{{simpleTypeName}}} {{name}}) {
    this.{{name}} = {{name}};
    {{#isOneToMany}}
    {{name}}.forEach({{associationModelName}} -> {{associationModelName}}.set{{className}}(this));
    {{/isOneToMany}}
  }
{{^-last}}

{{/-last}}
{{/fields}}

{{#manyToOneSideModels}}
  public void set{{name}}({{name}} {{nameCamel}}) {
    this.{{nameCamel}} = {{nameCamel}};
  }
{{/manyToOneSideModels}}
{{! end feature: setter methods }}
{{#enums}}
  public enum {{name}} {
    {{#options}}
    {{name}}("{{value}}"){{^-last}},{{/-last}}{{#-last}};{{/-last}}
    {{/options}}

    @JsonValue
    private final String value;

    private {{name}}(String value) {
      this.value = value;
    }

    @JsonCreator
    public static {{name}} fromValue(String value) {
      return Arrays.stream({{name}}.values())
        .filter(entry -> entry.value.equals(value))
        .findFirst()
        .get();
    }
  }
{{/enums}}
}