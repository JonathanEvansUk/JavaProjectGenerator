package {{packageName}};

import org.springframework.stereotype.Service;

{{#imports}}
import {{.}};
{{/imports}}

@Service
public class {{className}} {

  {{#subconverters}}
  private final {{type}} {{name}};
  {{/subconverters}}
  {{#hasSubconverters}}

  public {{className}}({{#subconverters}}{{type}} {{name}}{{^-last}},{{/-last}}{{/subconverters}}) {
    {{#subconverters}}
    this.{{name}} = {{name}};
    {{/subconverters}}
  }

  {{/hasSubconverters}}
  public {{entityType}} convert({{dtoType}} {{dtoNameCamel}}) {
    {{entityType}} {{entityNameCamel}} = new {{entityType}}();

    {{#fields}}
    {{^isRelationalField}}
    {{entityNameCamel}}.set{{nameCapitalised}}({{dtoNameCamel}}.get{{nameCapitalised}}());
    {{/isRelationalField}}
    {{/fields}}

    return {{entityNameCamel}};
  }

  public {{dtoType}} convert({{entityType}} {{entityNameCamel}}) {
    {{dtoType}} {{dtoNameCamel}} = new {{dtoType}}();

    {{#fields}}
    {{#isOneToMany}}
    {{dtoNameCamel}}.set{{nameCapitalised}}({{entityNameCamel}}.get{{nameCapitalised}}().stream().map(this::convert{{associationEntityType}}).toList());
    {{/isOneToMany}}
    {{#isManyToOne}}
    if ({{entityNameCamel}}.get{{nameCapitalised}}() != null) {
      {{dtoNameCamel}}.set{{nameCapitalised}}(convert{{nameCapitalised}}({{entityNameCamel}}.get{{nameCapitalised}}()));
    }
    {{/isManyToOne}}
    {{^isRelationalField}}
    {{dtoNameCamel}}.set{{nameCapitalised}}({{entityNameCamel}}.get{{nameCapitalised}}());
    {{/isRelationalField}}
    {{/fields}}

    return {{dtoNameCamel}};
  }
  {{#subconverters}}

  public {{dtoType}} convert{{entityType}}({{entityType}} {{entityTypeCamel}}) {
    return {{name}}.convert({{entityTypeCamel}});
  }

  public {{entityType}} convert{{entityType}}({{dtoType}} {{dtoTypeCamel}}) {
    return {{name}}.convert({{dtoTypeCamel}});
  }
  {{/subconverters}}
}
