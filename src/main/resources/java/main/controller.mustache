package {{packageName}};

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;
import java.util.Optional;

{{#imports}}
import {{.}};
{{/imports}}

@CrossOrigin
@RestController
@RequestMapping("/{{entityNameCamel}}")
public class {{className}} {

  private final {{serviceType}} {{serviceName}};

  public {{className}}({{serviceType}} {{serviceName}}) {
    this.{{serviceName}} = {{serviceName}};
  }

  @GetMapping
  public List<{{dtoType}}> findAll() {
    return {{serviceName}}.findAll();
  }
  {{#manyToOneSideModels}}

  @GetMapping("/unusedBy{{name}}")
  public List<{{dtoType}}> findUnusedBy{{name}}() {
    return {{serviceName}}.findUnusedBy{{name}}();
  }
  {{/manyToOneSideModels}}

  @GetMapping("/{id}")
  public Optional<{{dtoType}}> findById(@PathVariable {{entityIdType}} id) {
    return {{serviceName}}.findById(id);
  }

  @PostMapping
  public {{dtoType}} create(@RequestBody {{dtoType}} {{entityNameCamel}}) {
    return {{serviceName}}.save({{entityNameCamel}});
  }

  @PutMapping("/{id}")
  public {{dtoType}} update(@PathVariable Long id, @RequestBody {{dtoType}} {{entityNameCamel}}) {
    return {{serviceName}}.update(id, {{entityNameCamel}});
  }

  @DeleteMapping("/{id}")
  public ResponseEntity<{{dtoType}}> delete(@PathVariable {{entityIdType}} id) {
    Optional<{{dtoType}}> {{entityNameCamel}} = {{serviceName}}.delete(id);

    if ({{entityNameCamel}}.isPresent()) {
      return ResponseEntity.noContent().build();
    } else {
      return ResponseEntity.notFound().build();
    }
  }
}