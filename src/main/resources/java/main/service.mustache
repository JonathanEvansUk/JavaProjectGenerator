package {{packageName}};

import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;
{{#imports}}
import {{.}};
{{/imports}}

@Service
public class {{className}} {

  private final {{repositoryType}} {{repositoryName}};
  private final {{dtoConverterType}} {{dtoConverterName}};
  {{#fields}}
    {{#isRelationalField}}
  private final {{associationModelType}}Repository {{associationModelName}}Repository;
    {{/isRelationalField}}
  {{/fields}}

  public {{className}}({{repositoryType}} {{repositoryName}}, {{dtoConverterType}} {{dtoConverterName}}{{#hasRelationalFields}},{{/hasRelationalFields}}
    {{#relationalFields}}
      {{associationModelType}}Repository {{associationModelName}}Repository{{^-last}},{{/-last}}
    {{/relationalFields}}) {
    this.{{repositoryName}} = {{repositoryName}};
    this.{{dtoConverterName}} = {{dtoConverterName}};
    {{#relationalFields}}
    this.{{associationModelName}}Repository = {{associationModelName}}Repository;
    {{/relationalFields}}
  }

  public List<{{dtoType}}> findAll() {
    return {{repositoryName}}.findAll()
        .stream()
        .map(this::convert)
        .toList();
  }
  {{#manyToOneSideEntities}}

  public List<{{dtoType}}> findUnusedBy{{name}}() {
    return {{repositoryName}}.findBy{{name}}IsNull()
      .stream()
      .map(this::convert)
      .toList();
  }
  {{/manyToOneSideEntities}}

  public Optional<{{dtoType}}> findById({{entityIdType}} id) {
    return {{repositoryName}}.findById(id)
        .map(this::convert);
  }

  public {{dtoType}} save({{dtoType}} {{dtoNameCamel}}) {

    {{entityType}} {{entityNameCamel}} = convert({{dtoNameCamel}});

    {{#fields}}
      {{#isOneToMany}}
    var {{associationModelName}}Ids = {{dtoNameCamel}}.{{getterName}}().stream()
        .map({{associationModelType}}DTO::getId)
        .toList();

    var {{name}} = {{associationModelName}}Repository.findAllById({{associationModelName}}Ids);
      {{/isOneToMany}}
      {{#isManyToOne}}
    if ({{dtoNameCamel}}.{{getterName}}() != null) {
      var {{associationModelName}}Id = {{dtoNameCamel}}.{{getterName}}().getId();
      {{associationModelName}}Repository.findById({{associationModelName}}Id).ifPresent({{entityNameCamel}}::{{setterName}});
    }
      {{/isManyToOne}}
    {{/fields}}
    {{#fields}}
      {{#isOneToMany}}
    {{entityNameCamel}}.{{setterName}}({{name}});
      {{/isOneToMany}}
    {{/fields}}

    {{entityType}} saved{{entityType}} = {{repositoryName}}.save({{entityNameCamel}});

    return convert(saved{{entityType}});
  }

  public {{dtoType}} update(Long id, {{dtoType}} {{dtoNameCamel}}) {
    Optional<{{entityType}}> current{{entityType}} = {{repositoryName}}.findById(id);

    {{#oneToManyFields}}
    // reset any oneToMany relationships
    if (current{{entityType}}.isPresent()) {
      current{{entityType}}.get().{{getterName}}()
          .forEach({{associationModelType}} -> {{associationModelType}}.set{{entityType}}(null));
    }

    {{/oneToManyFields}}
    {{#oneToManyFields}}
    var {{associationModelName}}Ids = {{dtoNameCamel}}.{{getterName}}().stream()
        .map({{associationModelType}}DTO::getId)
        .toList();

    var {{name}} = {{associationModelName}}Repository.findAllById({{associationModelName}}Ids);
    {{/oneToManyFields}}
    {{entityType}} {{entityNameCamel}} = convert({{dtoNameCamel}});
    {{#oneToManyFields}}
    {{entityNameCamel}}.{{setterName}}({{name}});
    {{/oneToManyFields}}

    {{#manyToOneFields}}
    var {{associationModelName}} = {{dtoNameCamel}}.{{getterName}}();
    if ({{associationModelName}} != null) {
      {{associationModelName}}Repository.findById({{associationModelName}}.getId()).ifPresent({{entityNameCamel}}::{{setterName}});
    }
    {{/manyToOneFields}}

    {{entityType}} saved{{entityType}} = {{repositoryName}}.save({{entityNameCamel}});

    return convert(saved{{entityType}});
  }

  public Optional<{{dtoType}}> delete({{entityIdType}} id) {
    Optional<{{entityType}}> {{entityNameCamel}} = {{repositoryName}}.findById(id);

    if ({{entityNameCamel}}.isPresent()) {
      {{#fields}}
        {{#isOneToMany}}
      {{entityNameCamel}}.get().{{getterName}}()
        .forEach({{associationModelName}} -> {{associationModelName}}.set{{entityType}}(null));
        {{/isOneToMany}}
      {{/fields}}
      {{repositoryName}}.delete({{entityNameCamel}}.get());
    }

    return {{entityNameCamel}}.map(this::convert);
  }

  private {{entityType}} convert({{dtoType}} {{dtoNameCamel}}) {
    return {{dtoConverterName}}.convert({{dtoNameCamel}});
  }

  private {{dtoType}} convert({{entityType}} {{entityNameCamel}}) {
    return {{dtoConverterName}}.convert({{entityNameCamel}});
  }
}
