package {{packageName}};

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import java.util.List;
import java.util.Optional;

{{#imports}}
import {{.}};
{{/imports}}

@ExtendWith(MockitoExtension.class)
public class {{className}} {

  private {{controllerType}} {{controllerName}};

  @Mock
  private {{serviceType}} {{serviceName}};

  @BeforeEach
  public void setUp() {
    this.{{controllerName}} = new {{controllerType}}({{serviceName}});
  }

  @Test
  public void getAll{{entityName}}() {
    when({{serviceName}}.findAll()).thenReturn(List.of());

    ResponseEntity<List<{{dtoType}}>> response = {{controllerName}}.getAll{{entityName}}();

    assertEquals(HttpStatus.OK, response.getStatusCode());
    assertTrue(response.getBody().isEmpty());
  }

  @Test
  public void get{{entityName}}ById() {
    long id = 1L;
    when({{serviceName}}.findById(id)).thenReturn(Optional.empty());

    ResponseEntity<{{dtoType}}> byId = {{controllerName}}.get{{entityName}}ById(id);

    assertEquals(HttpStatus.NOT_FOUND, byId.getStatusCode());
    assertFalse(byId.hasBody());
  }

  @Test
  public void create{{entityName}}() {
    {{dtoType}} {{dtoName}} = new {{dtoType}}();

    when({{serviceName}}.save({{dtoName}})).thenReturn({{dtoName}});

    ResponseEntity<{{dtoType}}> response = {{controllerName}}.create{{entityName}}({{dtoName}});

    assertEquals(HttpStatus.CREATED, response.getStatusCode());
    assertEquals({{dtoName}}, response.getBody());
  }

  @Test
  public void update{{entityName}}ById() {
    long id = 1L;
    {{dtoType}} {{dtoName}} = new {{dtoType}}();

    when({{serviceName}}.update(id, {{dtoName}})).thenReturn({{dtoName}});

    ResponseEntity<{{dtoType}}> response = {{controllerName}}.update{{entityName}}ById(id, {{dtoName}});

    assertEquals(HttpStatus.OK, response.getStatusCode());
    assertEquals({{dtoName}}, response.getBody());
  }

  @Test
  public void delete{{entityName}}ById_notFound() {
    long id = 1L;

    when({{serviceName}}.delete(id)).thenReturn(Optional.empty());

    ResponseEntity<{{dtoType}}> response = {{controllerName}}.delete{{entityName}}ById(id);

    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
  }

  @Test
  public void delete{{entityName}}ById() {
    long id = 1L;

    {{dtoType}} {{dtoName}} = new {{dtoType}}();

    when({{serviceName}}.delete(id)).thenReturn(Optional.of({{dtoName}}));

    ResponseEntity<{{dtoType}}> response = {{controllerName}}.delete{{entityName}}ById(id);

    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
    assertFalse(response.hasBody());
  }
}
