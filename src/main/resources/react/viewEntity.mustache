import Form from "@rjsf/bootstrap-4";
import { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { replaceNullsWithUndefined } from "../../utils/Utils.js";
{{#entity.hasJsonFields}}
import JsonFileUploadWidget from "../../utils/JsonFileUploadWidget";
{{/entity.hasJsonFields}}

export default function View{{entity.nameCapitalised}}() {
  const { id } = useParams();

  const [formData, setFormData] = useState(null);

  useEffect(() => {
    fetch(`http://localhost:8080/{{entity.name}}/${id}`)
      .then(response => response.json())
      .then(data => replaceNullsWithUndefined(data))
      {{#entity.hasRelationalFields}}
      .then(data => ({
        ...data,
        {{#entity.relationalFields}}
          {{#isOneToMany}}
        {{name}}: data.{{name}}.map({{associationEntityType}} => JSON.stringify({{associationEntityType}})){{^-last}},{{/-last}}
          {{/isOneToMany}}
          {{#isManyToOne}}
        {{name}}: JSON.stringify(data.{{name}})
          {{/isManyToOne}}
        {{/entity.relationalFields}}
        }))
      {{/entity.hasRelationalFields}}
    .then(data => setFormData(data));
  },[]);

  const schema = {{{schema}}};
  {{#entity.hasJsonFields}}

  const widgets = {
    "jsonFileUploadWidget": JsonFileUploadWidget
  };

  {{/entity.hasJsonFields}}
  const uiSchema = {
  {{#entity.jsonFields}}
    "{{name}}" : { "ui:widget": "jsonFileUploadWidget" },
  {{/entity.jsonFields}}
   "ui:submitButtonOptions": {
      "norender": true,
    }
  };

  return (<Form schema={schema} formData={formData} uiSchema={uiSchema} {{#entity.hasJsonFields}}widgets={widgets}{{/entity.hasJsonFields}} readonly  disabled/>);
};
