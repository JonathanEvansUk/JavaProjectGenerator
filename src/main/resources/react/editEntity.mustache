import Form from "@rjsf/bootstrap-4";
import { useEffect, useState } from "react";
import { useParams, Link } from "react-router-dom";
import { Button } from "react-bootstrap";
import { replaceNullsWithUndefined } from "../../utils/Utils.js";

export default function Edit{{model.nameCapitalised}}() {
  const [formData, setFormData] = useState(null);
  const { id } = useParams();

{{#model.relationalFields}}
  {{#isOneToMany}}
  const [{{name}}, set{{nameCapitalised}}] = useState([]);
  {{/isOneToMany}}
  {{#isManyToOne}}
  const [{{name}}List, set{{nameCapitalised}}List] = useState([]);
  {{/isManyToOne}}
{{/model.relationalFields}}

  useEffect(() => {
    const fetchData = async () => {
      const [current{{model.nameCapitalised}}{{#model.hasRelationalFields}}, {{/model.hasRelationalFields}}{{#model.relationalFields}}{{name}}Response{{^-last}}, {{/-last}}{{/model.relationalFields}}] = await Promise.all([
          fetchExisting(id){{#model.hasRelationalFields}}, {{/model.hasRelationalFields}}
          {{#model.relationalFields}}
            {{#isOneToMany}}
          fetch(`http://localhost:8080/{{associationModelType}}/unusedBy{{model.nameCapitalised}}`).then(response => response.json()){{^-last}},{{/-last}}
            {{/isOneToMany}}
            {{#isManyToOne}}
          fetch(`http://localhost:8080/{{associationModelType}}`).then(response => response.json()){{^-last}},{{/-last}}
            {{/isManyToOne}}
          {{/model.relationalFields}}
      ]);

      setFormData(current{{model.nameCapitalised}});
      {{#model.relationalFields}}
        {{#isOneToMany}}
      set{{nameCapitalised}}({{name}}Response);
        {{/isOneToMany}}
        {{#isManyToOne}}
      set{{nameCapitalised}}List({{name}}Response);
        {{/isManyToOne}}
      {{/model.relationalFields}}
    };

    fetchData();
  }, []);

  const submitForm = ({ formData }) => {
    {{#model.relationalFields}}
      {{#isOneToMany}}
    formData.{{name}} = formData.{{name}}.map(
      id => {{name}}.find({{associationModelType}} => {{associationModelType}}.id === id)
    );
      {{/isOneToMany}}
      {{#isManyToOne}}
    formData.{{name}} = {{name}}List.find({{associationModelType}} => {{associationModelType}}.id === formData.{{name}});
      {{/isManyToOne}}
    {{/model.relationalFields}}
    fetch("http://localhost:8080/{{model.name}}/" + id, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(formData)
    }).then(response => console.log(response));
  };

  const schema = {{{schema}}};
  const uiSchema = {};

  {{#model.relationalFields}}
  if ({{name}}{{#isManyToOne}}List{{/isManyToOne}}.length > 0) {
    {{#isOneToMany}}
    schema.properties.{{name}}.items.enum = {{name}}.map(item => item.id);
    schema.properties.{{name}}.items.enumNames = {{name}}.map(item => JSON.stringify(item));
    {{/isOneToMany}}
    {{#isManyToOne}}
    schema.properties.{{name}}.oneOf = {{name}}List.map(item => ({ "title": JSON.stringify(item), "enum": [ item.id ]}));
    {{/isManyToOne}}
  } else {
    uiSchema.comments = {
      "ui:disabled": true,
      "ui:addable": false,
      "ui:description": (
        <div>
          There are currently no {{name}}.{" "}
          <Button as={Link} to={"/entities/{{associationModelType}}"}>
            Add
          </Button>
        </div>
      ),
      "ui:label": false
    };
  }
  {{/model.relationalFields}}
  return (<Form schema={schema} formData={formData} onSubmit={submitForm} uiSchema={uiSchema} />);
};

const fetchExisting = (id) => {
  return fetch(`http://localhost:8080/{{model.name}}/${id}`)
      .then(response => response.json())
      .then(data => replaceNullsWithUndefined(data))
      {{#model.hasRelationalFields}}
      .then(data => ({
        ...data,
        {{#model.relationalFields}}
          {{#isOneToMany}}
        {{name}}: data.{{name}}.map({{associationModelType}} => {{associationModelType}}.id){{^-last}},{{/-last}}
          {{/isOneToMany}}
          {{#isManyToOne}}
        {{name}}: data.{{name}}.id{{^-last}},{{/-last}}
          {{/isManyToOne}}
        {{/model.relationalFields}}
      })){{/model.hasRelationalFields}};
};
