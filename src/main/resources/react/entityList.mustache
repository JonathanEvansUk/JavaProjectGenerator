import { useEffect, useState } from "react";
import Table from "react-bootstrap/Table";
import Card from "react-bootstrap/Card";
import Button from "react-bootstrap/Button";
import Form from "react-bootstrap/Form";
import { Link } from "react-router-dom";
import DeleteModal from "../../utils/DeleteModal";
import DeleteButton from "../../utils/DeleteButton";
{{#model.hasJsonFields}}
import { JsonViewer } from "@textea/json-viewer";
import { JSON_VIEWER_THEME } from "../../utils/JsonViewerTheme";
{{/model.hasJsonFields}}
{{#model.hasRelationalFields}}
import { JsonViewer } from "@textea/json-viewer";
import { JSON_VIEWER_THEME } from "../../utils/JsonViewerTheme";
{{/model.hasRelationalFields}}
export default function {{model.nameCapitalised}}List() {
  let [{{model.name}}List, set{{model.nameCapitalised}}List] = useState([]);

  const [showDelete, setShowDelete] = useState(false);
  const [deleteId, setDeleteId] = useState(null);
  const hideDelete = () => setShowDelete(false);
  const handleDeleteShow = deleteId => {
    setShowDelete(true);
    setDeleteId(deleteId);
  };

  useEffect(() => {
    fetch("http://localhost:8080/{{model.name}}")
    .then(response => response.json())
    .then(data => {
      set{{model.nameCapitalised}}List(data);
    });
  },[]);

  const tableHeaders = [
    {{#model.fields}}
      "{{name}}"{{^-last}},{{/-last}}
    {{/model.fields}}
  ];

  console.log({{model.name}}List);
  const rows = {{model.name}}List.map({{model.name}} => createRow({{model.name}}, tableHeaders, handleDeleteShow));

  const performDelete = deleteId => {
    console.log("Deleting: ", deleteId);
    fetch(`http://localhost:8080/{{model.name}}/${deleteId}`, {
      method: "DELETE"
    })
      .then(() => set{{model.nameCapitalised}}List({{model.name}}List.filter({{model.name}} => {{model.name}}.id !== deleteId)))
      .then(() => setDeleteId(null))
      .then(() => hideDelete());
  };

  return (
    <Card>
      <Card.Header className="d-flex justify-content-between align-items-center">
        <h4 className="m-0 font-weight-normal">{{model.nameCapitalised}}</h4>
        <Button as={Link} to="/entities/{{model.name}}/create">
          Create a {{model.nameCapitalised}}
        </Button>
      </Card.Header>
      <Table responsive>
        <thead>
          <tr>
            {tableHeaders.map(header => <th key={header}>{header}</th>)}
            <th></th>
          </tr>
        </thead>

        <tbody>
          {rows}
        </tbody>
      </Table>

      <DeleteModal
          show={showDelete}
          title="Delete {{model.nameCapitalised}}"
          body={`Are you sure you want to delete {{model.nameCapitalised}}: ${deleteId}`}
          hide={hideDelete}
          action={() => performDelete(deleteId)}
      />
    </Card>);
};

const createRow = ({{model.name}}, tableHeaders, handleDeleteShow) => {
  return (
    <tr key={ {{model.name}}.id }>
      {{#model.fields}}
        <td key="{{name}}" className="align-middle" style={ {"lineHeight": "1em"} }>
        {{#displayAsText}}
          { {{model.name}}["{{name}}"] }
        {{/displayAsText}}
        {{^displayAsText}}
          {{#isDate}}
            { {{model.name}}["{{name}}"] && new Date({{model.name}}["{{name}}"]).toLocaleString()}
          {{/isDate}}
          {{#isBoolean}}
            <i className={ {{model.name}}["{{name}}"] ? "bi bi-check-lg text-success" : ""} style={ { "fontSize": "2em", "lineHeight": "1em"} }></i>
          {{/isBoolean}}
          {{#isRelational}}
            {{#isOneToMany}}
              { {{model.name}}["{{name}}"].map({{associationModelType}} => <div key={ {{associationModelType}}.id }>{create{{associationModelTypeCapitalised}}({{associationModelType}})}</div>) }
            {{/isOneToMany}}
            {{#isManyToOne}}
              { create{{associationModelTypeCapitalised}}({{model.name}}["{{name}}"]) }
            {{/isManyToOne}}
          {{/isRelational}}
          {{#isJson}}
            <JsonViewer editable={false}
                        value={ JSON.parse({{model.name}}["{{name}}"]) }
                        defaultInspectDepth={0}
                        rootName={false}
                        displayDataTypes={false}
                        collapseStringsAfterLength={false}
                        theme={JSON_VIEWER_THEME} />
          {{/isJson}}
        {{/displayAsText}}
        </td>
      {{/model.fields}}
      <td>
        <div className="float-right">
          <Button as={Link} to={"/entities/{{model.name}}/" + {{model.name}}.id} variant="info" size="sm">
            <i className="bi bi-eye-fill pr-1"></i>
            View</Button>
          <Button className="mx-sm-1" as={Link} to={"/entities/{{model.name}}/" + {{model.name}}.id + "/edit"} variant="primary" size="sm">
            <i className="bi bi-pencil-fill pr-1"></i>
            Edit</Button>
          <DeleteButton id={ {{model.name}}.id } handleDeleteShow={handleDeleteShow} />
        </div>
      </td>
    </tr>
  );
};

{{#model.fields}}
  {{#isRelational}}
const create{{associationModelTypeCapitalised}} = ({{associationModelType}}) => {
  if ({{associationModelType}} === undefined) {
    return ("-");
  }
  //const {id} = {{associationModelType}};
  //return (
  //  <Link to={"/entities/{{associationModelType}}/" + id}>{JSON.stringify({{associationModelType}})}</Link>
  //);

  return (<JsonViewer editable={false}
                      value={ {{associationModelType}} }
                      defaultInspectDepth={0}
                      rootName={false}
                      displayDataTypes={false}
                      collapseStringsAfterLength={false}
                      theme={JSON_VIEWER_THEME}/>);
};
  {{/isRelational}}
{{/model.fields}}
