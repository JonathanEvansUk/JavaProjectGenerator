import Form from "@rjsf/bootstrap-4";
import { useNavigate, Link } from "react-router-dom";
import { useEffect, useState } from "react";
import { Button } from "react-bootstrap";
{{#model.hasJsonFields}}
import JsonFileUploadWidget from "../../utils/JsonFileUploadWidget";
{{/model.hasJsonFields}}

export default function Create{{model.nameCapitalised}}() {
  const navigate = useNavigate();
  {{#model.relationalFields}}
  {{#isOneToMany}}
  const [{{name}}, set{{nameCapitalised}}] = useState([]);
  {{/isOneToMany}}
  {{#isManyToOne}}
  const [{{name}}List, set{{nameCapitalised}}List] = useState([]);
  {{/isManyToOne}}
  {{/model.relationalFields}}
  {{#model.hasRelationalFields}}
  useEffect(() => {
    const fetchData = async () => {
      const [{{#model.relationalFields}}{{name}}Response{{^-last}}, {{/-last}}{{/model.relationalFields}}] = await Promise.all([
      {{#model.relationalFields}}
      {{#isOneToMany}}
        fetch(`http://localhost:8080/{{associationModelType}}/unusedBy{{model.nameCapitalised}}`).then(response => response.json()){{^-last}},{{/-last}}
      {{/isOneToMany}}
      {{#isManyToOne}}
        fetch(`http://localhost:8080/{{associationModelType}}`).then(response => response.json()){{^-last}},{{/-last}}
      {{/isManyToOne}}
      {{/model.relationalFields}}
      ]);

      {{#model.relationalFields}}
      console.log({{name}}Response);
      {{#isOneToMany}}
      set{{nameCapitalised}}({{name}}Response);
      {{/isOneToMany}}
      {{#isManyToOne}}
      set{{nameCapitalised}}List({{name}}Response);
      {{/isManyToOne}}
      {{/model.relationalFields}}
    };

    fetchData();
  }, []);
  {{/model.hasRelationalFields}}
  {{#model.fields}}
  {{#isOneToMany}}
  console.log({{name}});
  {{/isOneToMany}}
  {{/model.fields}}
  const submitForm = ({ formData }) => {
    console.log(JSON.stringify(formData));

    {{#model.relationalFields}}
      {{#isOneToMany}}
    formData.{{name}} = formData.{{name}}.map(
      id => {{name}}.find({{associationModelType}} => {{associationModelType}}.id === id)
    );
      {{/isOneToMany}}
      {{#isManyToOne}}
    formData.{{name}} = {{name}}List.find({{associationModelType}} => {{associationModelType}}.id === formData.{{name}});
      {{/isManyToOne}}
    {{/model.relationalFields}}

    fetch("http://localhost:8080/{{model.name}}", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(formData)
    })
      .then(response => {
        if (!response.ok) {
          throw Error(response.statusText);
        }
        return response;
      })
      .then(response => console.log(response))
      .then(() => navigate("/entities/{{model.nameCapitalised}}"))
      .catch(error => console.log(error));
  };

  const schema = {{{schema}}};
  const uiSchema = {
    {{#model.jsonFields}}
    "{{name}}" : { "ui:widget": "jsonFileUploadWidget" }{{^-last}},{{/-last}}
    {{/model.jsonFields}}
  };
  {{#model.hasJsonFields}}

  const widgets = {
    "jsonFileUploadWidget": JsonFileUploadWidget
  };
  {{/model.hasJsonFields}}
  {{#model.fields}}
    {{#isRelational}}
  if ({{name}}{{#isManyToOne}}List{{/isManyToOne}}.length > 0) {
      {{#isOneToMany}}
    schema.properties.{{name}}.items.enum = {{name}}.map(item => item.id);
    schema.properties.{{name}}.items.enumNames = {{name}}.map(item => JSON.stringify(item));
      {{/isOneToMany}}
      {{#isManyToOne}}
    schema.properties.{{name}}.oneOf = {{name}}List.map(item => ({ "title": JSON.stringify(item), "enum": [ item.id ]}));
      {{/isManyToOne}}
  } else {
    uiSchema.{{name}} = {
      "ui:disabled": true,
      "ui:addable": false,
      "ui:description": (
        <div>
          There are currently no unused {{name}}.{" "}
          <Button variant="info" size="sm" as={Link} to={"/entities/{{associationModelType}}"}>
            Add
          </Button>
        </div>
      ),
      "ui:label": false
    };
  }
    {{/isRelational}}
  {{/model.fields}}

  return (<Form schema={schema} onSubmit={submitForm} uiSchema={uiSchema} {{#model.hasJsonFields}}widgets={widgets}{{/model.hasJsonFields}} />);
};
